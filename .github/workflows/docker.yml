# Nom du workflow
name: Build and Push Docker Image to DockerHub

# Ce workflow se déclenche sur un `push` dans les branches master ou main.
on:
  push:
    branches:
      - master
      - main

# Définition des jobs qui vont s'exécuter.
jobs:
  build:
    # Spécifie l'environnement d'exécution, ici on utilise Ubuntu.
    runs-on: ubuntu-latest

    steps:
      # 1. Étape de récupération du code source depuis GitHub
      - name: Checkout code
        uses: actions/checkout@v3
        # `actions/checkout` permet de récupérer ton code dans le workflow
        # sans cela, ton code ne sera pas accessible dans l'environnement d'exécution

      # 2. Connexion à DockerHub avec tes identifiants
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        # Cette étape utilise  une action GitHub officielle qui permet de se connecter
        # à DockerHub en utilisant les secrets stockés dans GitHub.
        # Les secrets sont des variables d'environnement sécurisées dans ton repository GitHub.
        # Nous avons besoin de ton `DOCKER_USERNAME` et de ton `DOCKER_PASSWORD` (ou token DockerHub) ici.

      # 3. Étape de construction de l'image Docker à partir du Dockerfile
      - name: Build Docker image
        run: |
          docker build -t nadiroun/churn-app:latest .
        # `docker build` va créer une image Docker à partir du Dockerfile situé à la racine de ton projet.
        # Le `-t nadiroun/churn-app:latest` donne un nom à l'image (ici "nadiroun/churn-app") et une étiquette "latest".
        # Le `.` à la fin signifie que Docker va utiliser le contexte de construction dans le répertoire actuel.

      # 4. Étape de push de l'image vers DockerHub
      - name: Push Docker image to DockerHub
        run: |
          docker push nadiroun/churn_v1_app:latest
        # Cette étape pousse l'imaae  Docker vers ton repository DockerHub (ici "nadiroun/churn-app").
        # Cela rend l'image accessible depuis DockerHub, prête à être utilisée dans un déploiement.
